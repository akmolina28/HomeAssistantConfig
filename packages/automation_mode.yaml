###################################################################
#
# Home Automation Mode
# --------------------
#
#   Automation mode is a set of profiles that govern all
#   automations. It is defined by the entity 
#   input_select.automation_mode.
#
#   The different profiles are:
#     Home - the default profile enabled when someone is home
#     Away - enabled when nobody is home
#     Sleep - enabled when everyone is asleep
#     Vacation - enabled during long away periods
#     Guest - enabled when guests are staying over
#
# Features
# --------
#   Current Mode:       The current mode is stored in the entity
#                       input_select.automation_mode.
#
#   Transitions:        Transitioning from one mode to another is
#                       done by changing the state of the entity
#                       input_select.automation_mode, e.g.
#                       ...
#                         action:
#                         - service: input_select.select_option
#                           data:
#                             entity_id: input_select.automation_mode
#                             option: sleep
#
#   Dispatcher:         A single automation is triggered by every
#                       transitions, and it fires different scripts
#                       depending on previous state, new state, and
#                       other conditions. This "dispatcher" script
#                       helps to separate the transition triggers
#                       from the transition behavior.
#   
#   Automation Gating:  All automations should have conditions to
#                       check the current automation mode. For
#                       example, in away mode we should not
#                       automatically turn lights on at night. 
#
###################################################################

input_select:
  # Current Mode variable
  automation_mode:
    name: Automation Mode
    icon: mdi:home-assistant
    options:
      - home
      - sleep
      - away
      - guest
      - vacation

###########
# Scripts #
###########

script:
# Dispatcher Script ##############################################
  dispatch_automation_mode_transition:
    alias: Set Automation Mode
    sequence:
    - service: script.turn_on
      data_template:
        entity_id: >
          {% if (new_mode == "home") %}
            {% if (previous_mode == "sleep") %}
              script.automation_mode_transition_sleep_to_home
            {% elif (previous_mode == "away") %}
              script.automation_mode_transition_away_to_home
            {% else %}
              script.automation_mode_transition_other_to_other
            {% endif %}
          {% elif (new_mode == "sleep") %}
            script.automation_mode_transition_other_to_sleep
          {% elif (new_mode == "away") %}
            script.automation_mode_transition_other_to_away
          {% else %}
            script.automation_mode_transition_other_to_other
          {% endif %}

# Transition Scripts #############################################
  automation_mode_transition_sleep_to_home:
    alias: Sleep Mode to Home Mode
    sequence:
    - service: script.turn_off_air_purifier

    # Turn on motion sensors
    - service: automation.turn_on
      entity_id: automation.turn_on_man_cave_lights_when_motion_detected
    
    # if it's early in the morning, turn some lights on
    - condition: time
      after: '04:00:00'
      before: '08:00:00'
    - service: scene.turn_on
      entity_id: scene.great_room_scene_wake_up
    - service: automation.turn_on
      entity_id: automation.turn_on_man_cave_lights_when_motion_detected

  automation_mode_transition_away_to_home:
    alias: Away Mode to Home Mode
    sequence:
    # Turn off noisy fan, resume A/C schedule
    - service: script.turn_off_air_purifier
    - service: script.resume_climate_schedule

    # Turn on motion sensors
    - service: automation.turn_on
      entity_id: automation.turn_on_man_cave_lights_when_motion_detected

    # if it's dark out, turn on some lights
    - condition: or
      conditions:
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: numeric_state
        entity_id: sensor.hue_100_lux
        below: 10
    - service: scene.turn_on
      entity_id: scene.house_scene_warm_welcome

  automation_mode_transition_other_to_away:
    alias: Other Mode to Away Mode
    sequence:
    - service: script.set_climate_away_mode
    - service: script.turn_on_air_purifier
    - service: script.turn_off_interior_lights

  automation_mode_transition_other_to_sleep:
    alias: Other Mode to Sleep Mode
    sequence:
    - service: script.lighting_scene_sleep_mode
    - service: script.turn_on_air_purifier
    - service: script.turn_off_media_players

  automation_mode_transition_other_to_other:
    alias: Other Mode to Other Mode
    sequence:
    - service: notify.html5_notifications
      data:
        message: 'automation_mode_transition_other'


  set_automation_mode_sleep:
    alias: Set Automation Mode - Sleep
    sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.automation_mode
        option: sleep
      
###############
# Automations #
###############
automation:
  # When the automation mode changes, call the dispatcher
  - alias: Automation Mode Transition
    trigger:
    - platform: state
      entity_id: input_select.automation_mode
    action:
    - service: script.dispatch_automation_mode_transition
      data_template:
        new_mode: '{{ trigger.to_state.state }}'
        previous_mode: '{{ trigger.from_state.state }}'
  - alias: Auto Sleep Mode
    trigger:
    - platform: time
      at: '02:00:00'
    condition:
    - condition: state
      entity_id: input_select.automation_mode
      state: home
    action:
    - service: input_select.select_option
      data:
        entity_id: input_select.automation_mode
        option: sleep
