###################################################################
#
# Vacuum
# ------
#
#   This package contains configuration for automating vacuum
#   chores.
#
# Features
# --------
# 
#  * Automatic reminders to empty the dust bin
#  * Automatic reminders to clean the main brush
#  * Automatic reminders to run a cleanup
#  * Push notifications when a chore is due
#
###################################################################

# vacuum:
# - platform: xiaomi_miio
#   host: 192.168.1.99
#   token: !secret xiaomi_vacuum_token
#   name: iSuck

camera:
- platform: xiaomi_cloud_map_extractor
  host: !secret xiaomi_vacuum_host
  token: !secret xiaomi_vacuum_token
  username: !secret xiaomi_cloud_username
  password: !secret xiaomi_cloud_password
  name: iSuck Map
  draw: ['all']
  colors:
    color_map_outside: [255, 255, 255, 1]
  attributes:
    - calibration_points    

input_datetime:
  isuck_last_clean_time:
    name: iSuck Last Full Clean
    has_date: true
    has_time: true

input_boolean:
  isuck_dust_bin_full:
    name: iSuck Dust Bin
    icon: mdi:trash-can

  isuck_brush_dirty:
    name: iSuck Brush
    icon: mdi:broom
  
  isuck_cleaning_due:
    name: iSuck Cleaning Due
    icon: mdi:robot-vacuum

sensor:
- platform: template
  sensors: 
    vacuum_hours_since_last_clean:
      friendly_name: Last Vacuum Cleaning
      value_template: >
        {% set now = as_timestamp(states("sensor.date_time_iso")) | float %}
        {% set then = as_timestamp(states("input_datetime.isuck_last_clean_time")) | float %}
        {{ ((now - then) / 3600) | round(0) }}
      unit_of_measurement: 'hours'

    vacuum_cleaning_due:
      friendly_name: Vacuum Cleaning Due
      value_template: >
        {% if (states("vacuum.isuck") != 'docked') %}
          not_due
        {% else %}
          {% set now = as_timestamp(states("sensor.date_time_iso")) | float %}
          {% set then = as_timestamp(states("input_datetime.isuck_last_clean_time")) | float %}
          {% set hours_since_last_clean = ((now - then) / 3600) | round(0) %}
          {% if (hours_since_last_clean < 96) %}
            not_due
          {% elif (hours_since_last_clean < 144) %}
            due
          {% else %}
            overdue
          {% endif %}
        {% endif %}

script:
  vacuum_start_cleanup:
    alias: Vacuum Start Cleanup
    sequence:
    - service: vacuum.start
      data:
        entity_id: vacuum.isuck

  vacuum_pause_cleanup:
    alias: Vacuum Pause Cleanup
    sequence:
    - service: vacuum.pause
      data:
        entity_id: vacuum.isuck
  
  vacuum_resume_cleanup:
    alias: Vacuum Resume Cleanup
    sequence:
    - service: vacuum.start_pause
      data:
        entity_id: vacuum.isuck

  vacuum_stop_cleanup:
    alias: Vacuum Stop Cleanup
    sequence:
    - service: vacuum.stop
      data:
        entity_id: vacuum.isuck
    
  vacuum_return_to_dock:
    alias: Vacuum Return To Dock
    sequence:
    - service: vacuum.return_to_base
      data:
        entity_id: vacuum.isuck

  vacuum_go_to_trash_can:
    alias: Vacuum Go To Trash Can
    sequence:
    - service: vacuum.send_command
      data:
        entity_id: vacuum.isuck
        command: app_goto_target
        params: [34500, 22000]
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.isuck_dust_bin_full
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.isuck_brush_dirty